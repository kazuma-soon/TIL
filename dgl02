{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNhEP3A7tuS2+kBv+YTe4fw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kazuma-soon/TIL/blob/main/dgl02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iliGKhwMeUUU",
        "outputId": "9f135385-c275-4759-e4e1-d453d557f3d1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Looking in links: https://data.dgl.ai/wheels/repo.html\n",
            "Requirement already satisfied: dgl in /usr/local/lib/python3.7/dist-packages (0.9.0)\n",
            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.7/dist-packages (from dgl) (5.9.1)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.7/dist-packages (from dgl) (1.21.6)\n",
            "Requirement already satisfied: networkx>=2.1 in /usr/local/lib/python3.7/dist-packages (from dgl) (2.6.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from dgl) (2.23.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from dgl) (4.64.0)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from dgl) (1.7.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->dgl) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->dgl) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->dgl) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->dgl) (2022.6.15)\n"
          ]
        }
      ],
      "source": [
        "!pip install dgl -f https://data.dgl.ai/wheels/repo.html\n",
        "import torch\n",
        "import dgl\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "g1 = dgl.graph(([0, 0, 0, 0, 0], [1, 2, 3, 4, 5]), num_nodes=6)\n",
        "# Equivalently, PyTorch LongTensors also work.\n",
        "g2 = dgl.graph((torch.LongTensor([0, 0, 0, 0, 0]), torch.LongTensor([1, 2, 3, 4, 5])), num_nodes=6)\n",
        "\n",
        "# You can omit the number of nodes argument if you can tell the number of nodes from the edge list alone.\n",
        "g = dgl.graph(([0, 0, 0, 0, 0], [1, 2, 3, 4, 5]))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(g)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A1zgVQiyeW22",
        "outputId": "36864b4a-7e44-47da-98dc-a23624c6df32"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__class__',\n",
              " '__contains__',\n",
              " '__copy__',\n",
              " '__delattr__',\n",
              " '__dict__',\n",
              " '__dir__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getitem__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__le__',\n",
              " '__lt__',\n",
              " '__module__',\n",
              " '__ne__',\n",
              " '__new__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__setattr__',\n",
              " '__setstate__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__subclasshook__',\n",
              " '__weakref__',\n",
              " '_batch_num_edges',\n",
              " '_batch_num_nodes',\n",
              " '_canonical_etypes',\n",
              " '_dsttypes_invmap',\n",
              " '_edge_frames',\n",
              " '_etype2canonical',\n",
              " '_etypes',\n",
              " '_etypes_invmap',\n",
              " '_find_etypes',\n",
              " '_get_e_repr',\n",
              " '_get_n_repr',\n",
              " '_graph',\n",
              " '_idtype_str',\n",
              " '_init',\n",
              " '_is_unibipartite',\n",
              " '_node_frames',\n",
              " '_ntypes',\n",
              " '_pop_e_repr',\n",
              " '_pop_n_repr',\n",
              " '_reset_cached_info',\n",
              " '_set_e_repr',\n",
              " '_set_n_repr',\n",
              " '_srctypes_invmap',\n",
              " 'add_edge',\n",
              " 'add_edges',\n",
              " 'add_nodes',\n",
              " 'add_self_loop',\n",
              " 'adj',\n",
              " 'adj_sparse',\n",
              " 'adjacency_matrix',\n",
              " 'adjacency_matrix_scipy',\n",
              " 'all_edges',\n",
              " 'apply_edges',\n",
              " 'apply_nodes',\n",
              " 'astype',\n",
              " 'batch_num_edges',\n",
              " 'batch_num_nodes',\n",
              " 'batch_size',\n",
              " 'canonical_etypes',\n",
              " 'clone',\n",
              " 'cpu',\n",
              " 'create_formats_',\n",
              " 'device',\n",
              " 'dstdata',\n",
              " 'dstnodes',\n",
              " 'dsttypes',\n",
              " 'edata',\n",
              " 'edge_attr_schemes',\n",
              " 'edge_id',\n",
              " 'edge_ids',\n",
              " 'edge_subgraph',\n",
              " 'edge_type_subgraph',\n",
              " 'edges',\n",
              " 'etypes',\n",
              " 'filter_edges',\n",
              " 'filter_nodes',\n",
              " 'find_edges',\n",
              " 'formats',\n",
              " 'from_networkx',\n",
              " 'from_scipy_sparse_matrix',\n",
              " 'get_edge_storage',\n",
              " 'get_etype_id',\n",
              " 'get_node_storage',\n",
              " 'get_ntype_id',\n",
              " 'get_ntype_id_from_dst',\n",
              " 'get_ntype_id_from_src',\n",
              " 'global_uniform_negative_sampling',\n",
              " 'group_apply_edges',\n",
              " 'has_edge_between',\n",
              " 'has_edges_between',\n",
              " 'has_node',\n",
              " 'has_nodes',\n",
              " 'idtype',\n",
              " 'in_degree',\n",
              " 'in_degrees',\n",
              " 'in_edges',\n",
              " 'in_subgraph',\n",
              " 'inc',\n",
              " 'incidence_matrix',\n",
              " 'int',\n",
              " 'is_block',\n",
              " 'is_homogeneous',\n",
              " 'is_multigraph',\n",
              " 'is_pinned',\n",
              " 'is_readonly',\n",
              " 'is_unibipartite',\n",
              " 'khop_in_subgraph',\n",
              " 'khop_out_subgraph',\n",
              " 'line_graph',\n",
              " 'local_scope',\n",
              " 'local_var',\n",
              " 'long',\n",
              " 'metagraph',\n",
              " 'multi_pull',\n",
              " 'multi_recv',\n",
              " 'multi_send_and_recv',\n",
              " 'multi_update_all',\n",
              " 'ndata',\n",
              " 'node_attr_schemes',\n",
              " 'node_type_subgraph',\n",
              " 'nodes',\n",
              " 'ntypes',\n",
              " 'num_dst_nodes',\n",
              " 'num_edges',\n",
              " 'num_nodes',\n",
              " 'num_src_nodes',\n",
              " 'number_of_dst_nodes',\n",
              " 'number_of_edges',\n",
              " 'number_of_nodes',\n",
              " 'number_of_src_nodes',\n",
              " 'out_degree',\n",
              " 'out_degrees',\n",
              " 'out_edges',\n",
              " 'out_subgraph',\n",
              " 'pin_memory_',\n",
              " 'predecessors',\n",
              " 'prop_edges',\n",
              " 'prop_nodes',\n",
              " 'pull',\n",
              " 'push',\n",
              " 'readonly',\n",
              " 'recv',\n",
              " 'register_apply_edge_func',\n",
              " 'register_apply_node_func',\n",
              " 'register_message_func',\n",
              " 'register_reduce_func',\n",
              " 'remove_edges',\n",
              " 'remove_nodes',\n",
              " 'remove_self_loop',\n",
              " 'reorder_graph',\n",
              " 'reverse',\n",
              " 'sample_etype_neighbors',\n",
              " 'sample_neighbors',\n",
              " 'sample_neighbors_biased',\n",
              " 'select_topk',\n",
              " 'send',\n",
              " 'send_and_recv',\n",
              " 'set_batch_num_edges',\n",
              " 'set_batch_num_nodes',\n",
              " 'set_e_initializer',\n",
              " 'set_n_initializer',\n",
              " 'shared_memory',\n",
              " 'srcdata',\n",
              " 'srcnodes',\n",
              " 'srctypes',\n",
              " 'subgraph',\n",
              " 'successors',\n",
              " 'to',\n",
              " 'to_canonical_etype',\n",
              " 'to_cugraph',\n",
              " 'to_networkx',\n",
              " 'to_simple',\n",
              " 'unpin_memory_',\n",
              " 'update_all']"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g.edata"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "36Dcn7ORvTBE",
        "outputId": "4e5d60e6-4365-4d89-e7a7-6ceabe3c00c1"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assign a 3-dimensional node feature vector for each node.\n",
        "g.ndata['x'] = torch.randn(6, 3)\n",
        "# Assign a 4-dimensional edge feature vector for each edge.\n",
        "g.edata['a'] = torch.randn(5, 4)\n",
        "# Assign a 5x4 node feature matrix for each node.  Node and edge features in DGL can be multi-dimensional.\n",
        "g.ndata['y'] = torch.randn(6, 5, 4)\n",
        "\n",
        "print(g.edata['a'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "czYwHtjqwvhh",
        "outputId": "3b8bb604-9e66-4923-8859-f3271bb2bafb"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[ 1.1371, -0.8786,  0.5335,  1.6667],\n",
            "        [ 0.4532, -1.0277, -1.0081,  0.2650],\n",
            "        [-0.4842, -0.8914,  0.0884,  0.7273],\n",
            "        [ 0.9504,  0.7066, -1.2873,  1.2278],\n",
            "        [ 1.7853,  1.2081,  0.5572, -2.2259]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(g.num_nodes())\n",
        "print(g.num_edges())\n",
        "# Out degrees of the center node\n",
        "print(g.out_degrees(0))\n",
        "# In degrees of the center node - note that the graph is directed so the in degree should be 0.\n",
        "print(g.in_degrees(0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JGMPIevtxss3",
        "outputId": "12b2249a-ab36-4349-9237-ee019d593979"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n",
            "5\n",
            "5\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Induce a subgraph from node 0, node 1 and node 3 from the original graph.\n",
        "sg1 = g.subgraph([0, 1, 3])\n",
        "# Induce a subgraph from edge 0, edge 1 and edge 3 from the original graph.\n",
        "sg2 = g.edge_subgraph([0, 1, 3])"
      ],
      "metadata": {
        "id": "-faLSBrpx64A"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# The original IDs of each node in sg1\n",
        "print(sg1.ndata[dgl.NID])\n",
        "# The original IDs of each edge in sg1\n",
        "print(sg1.edata[dgl.EID])\n",
        "# The original IDs of each node in sg2\n",
        "print(sg2.ndata[dgl.NID])\n",
        "# The original IDs of each edge in sg2\n",
        "print(sg2.edata[dgl.EID])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sIv2bPFey6tx",
        "outputId": "38dc7ce8-ffbc-4487-ad9a-466dd392439c"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([0, 1, 3])\n",
            "tensor([0, 2])\n",
            "tensor([0, 1, 2, 4])\n",
            "tensor([0, 1, 3])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(sg1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DWU60ktjzkcG",
        "outputId": "70627050-bc8c-4a6a-b52a-b097876a678d"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__class__',\n",
              " '__contains__',\n",
              " '__copy__',\n",
              " '__delattr__',\n",
              " '__dict__',\n",
              " '__dir__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getitem__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__le__',\n",
              " '__lt__',\n",
              " '__module__',\n",
              " '__ne__',\n",
              " '__new__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__setattr__',\n",
              " '__setstate__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__subclasshook__',\n",
              " '__weakref__',\n",
              " '_batch_num_edges',\n",
              " '_batch_num_nodes',\n",
              " '_canonical_etypes',\n",
              " '_dsttypes_invmap',\n",
              " '_edge_frames',\n",
              " '_etype2canonical',\n",
              " '_etypes',\n",
              " '_etypes_invmap',\n",
              " '_find_etypes',\n",
              " '_get_e_repr',\n",
              " '_get_n_repr',\n",
              " '_graph',\n",
              " '_idtype_str',\n",
              " '_init',\n",
              " '_is_unibipartite',\n",
              " '_node_frames',\n",
              " '_ntypes',\n",
              " '_pop_e_repr',\n",
              " '_pop_n_repr',\n",
              " '_reset_cached_info',\n",
              " '_set_e_repr',\n",
              " '_set_n_repr',\n",
              " '_srctypes_invmap',\n",
              " 'add_edge',\n",
              " 'add_edges',\n",
              " 'add_nodes',\n",
              " 'add_self_loop',\n",
              " 'adj',\n",
              " 'adj_sparse',\n",
              " 'adjacency_matrix',\n",
              " 'adjacency_matrix_scipy',\n",
              " 'all_edges',\n",
              " 'apply_edges',\n",
              " 'apply_nodes',\n",
              " 'astype',\n",
              " 'batch_num_edges',\n",
              " 'batch_num_nodes',\n",
              " 'batch_size',\n",
              " 'canonical_etypes',\n",
              " 'clone',\n",
              " 'cpu',\n",
              " 'create_formats_',\n",
              " 'device',\n",
              " 'dstdata',\n",
              " 'dstnodes',\n",
              " 'dsttypes',\n",
              " 'edata',\n",
              " 'edge_attr_schemes',\n",
              " 'edge_id',\n",
              " 'edge_ids',\n",
              " 'edge_subgraph',\n",
              " 'edge_type_subgraph',\n",
              " 'edges',\n",
              " 'etypes',\n",
              " 'filter_edges',\n",
              " 'filter_nodes',\n",
              " 'find_edges',\n",
              " 'formats',\n",
              " 'from_networkx',\n",
              " 'from_scipy_sparse_matrix',\n",
              " 'get_edge_storage',\n",
              " 'get_etype_id',\n",
              " 'get_node_storage',\n",
              " 'get_ntype_id',\n",
              " 'get_ntype_id_from_dst',\n",
              " 'get_ntype_id_from_src',\n",
              " 'global_uniform_negative_sampling',\n",
              " 'group_apply_edges',\n",
              " 'has_edge_between',\n",
              " 'has_edges_between',\n",
              " 'has_node',\n",
              " 'has_nodes',\n",
              " 'idtype',\n",
              " 'in_degree',\n",
              " 'in_degrees',\n",
              " 'in_edges',\n",
              " 'in_subgraph',\n",
              " 'inc',\n",
              " 'incidence_matrix',\n",
              " 'int',\n",
              " 'is_block',\n",
              " 'is_homogeneous',\n",
              " 'is_multigraph',\n",
              " 'is_pinned',\n",
              " 'is_readonly',\n",
              " 'is_unibipartite',\n",
              " 'khop_in_subgraph',\n",
              " 'khop_out_subgraph',\n",
              " 'line_graph',\n",
              " 'local_scope',\n",
              " 'local_var',\n",
              " 'long',\n",
              " 'metagraph',\n",
              " 'multi_pull',\n",
              " 'multi_recv',\n",
              " 'multi_send_and_recv',\n",
              " 'multi_update_all',\n",
              " 'ndata',\n",
              " 'node_attr_schemes',\n",
              " 'node_type_subgraph',\n",
              " 'nodes',\n",
              " 'ntypes',\n",
              " 'num_dst_nodes',\n",
              " 'num_edges',\n",
              " 'num_nodes',\n",
              " 'num_src_nodes',\n",
              " 'number_of_dst_nodes',\n",
              " 'number_of_edges',\n",
              " 'number_of_nodes',\n",
              " 'number_of_src_nodes',\n",
              " 'out_degree',\n",
              " 'out_degrees',\n",
              " 'out_edges',\n",
              " 'out_subgraph',\n",
              " 'pin_memory_',\n",
              " 'predecessors',\n",
              " 'prop_edges',\n",
              " 'prop_nodes',\n",
              " 'pull',\n",
              " 'push',\n",
              " 'readonly',\n",
              " 'recv',\n",
              " 'register_apply_edge_func',\n",
              " 'register_apply_node_func',\n",
              " 'register_message_func',\n",
              " 'register_reduce_func',\n",
              " 'remove_edges',\n",
              " 'remove_nodes',\n",
              " 'remove_self_loop',\n",
              " 'reorder_graph',\n",
              " 'reverse',\n",
              " 'sample_etype_neighbors',\n",
              " 'sample_neighbors',\n",
              " 'sample_neighbors_biased',\n",
              " 'select_topk',\n",
              " 'send',\n",
              " 'send_and_recv',\n",
              " 'set_batch_num_edges',\n",
              " 'set_batch_num_nodes',\n",
              " 'set_e_initializer',\n",
              " 'set_n_initializer',\n",
              " 'shared_memory',\n",
              " 'srcdata',\n",
              " 'srcnodes',\n",
              " 'srctypes',\n",
              " 'subgraph',\n",
              " 'successors',\n",
              " 'to',\n",
              " 'to_canonical_etype',\n",
              " 'to_cugraph',\n",
              " 'to_networkx',\n",
              " 'to_simple',\n",
              " 'unpin_memory_',\n",
              " 'update_all']"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The original node feature of each node in sg1\n",
        "print(sg1.ndata['x'])\n",
        "# The original edge feature of each node in sg1\n",
        "print(sg1.edata['a'])\n",
        "# The original node feature of each node in sg2\n",
        "print(sg2.ndata['x'])\n",
        "# The original edge feature of each node in sg2\n",
        "print(sg2.edata['a'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vsky62a1z9d_",
        "outputId": "15e3632e-62c9-4b68-f578-78392eff1b93"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[ 0.0063,  0.7875,  1.0166],\n",
            "        [ 0.3759, -1.2421,  0.1615],\n",
            "        [ 0.6577,  0.3593, -1.1011]])\n",
            "tensor([[ 1.1371, -0.8786,  0.5335,  1.6667],\n",
            "        [-0.4842, -0.8914,  0.0884,  0.7273]])\n",
            "tensor([[ 0.0063,  0.7875,  1.0166],\n",
            "        [ 0.3759, -1.2421,  0.1615],\n",
            "        [ 0.5704, -0.4839,  1.5950],\n",
            "        [ 1.4821,  0.4479,  2.0275]])\n",
            "tensor([[ 1.1371, -0.8786,  0.5335,  1.6667],\n",
            "        [ 0.4532, -1.0277, -1.0081,  0.2650],\n",
            "        [ 0.9504,  0.7066, -1.2873,  1.2278]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "newg = dgl.add_reverse_edges(g)\n",
        "newg.edges()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zZ5xYj-60IaF",
        "outputId": "38f7baad-6f95-43f1-e94a-608201f8a4e6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([0, 0, 0, 0, 0, 1, 2, 3, 4, 5]),\n",
              " tensor([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g.edges()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "of576IJq0q5y",
        "outputId": "32cb41ef-602c-45d7-de7f-c154b7af954b"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([0, 0, 0, 0, 0]), tensor([1, 2, 3, 4, 5]))"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save graphs\n",
        "dgl.save_graphs('graph.dgl', g)\n",
        "dgl.save_graphs('graphs.dgl', [g, sg1, sg2])\n",
        "\n",
        "# Load graphs\n",
        "(g,), _ = dgl.load_graphs('graph.dgl')\n",
        "print(g)\n",
        "(g, sg1, sg2), _ = dgl.load_graphs('graphs.dgl')\n",
        "print(g)\n",
        "print(sg1)\n",
        "print(sg2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n-GFHWAV0wKz",
        "outputId": "fe33dc8a-e930-4564-ed45-00d56b112d67"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Graph(num_nodes=6, num_edges=5,\n",
            "      ndata_schemes={'y': Scheme(shape=(5, 4), dtype=torch.float32), 'x': Scheme(shape=(3,), dtype=torch.float32)}\n",
            "      edata_schemes={'a': Scheme(shape=(4,), dtype=torch.float32)})\n",
            "Graph(num_nodes=6, num_edges=5,\n",
            "      ndata_schemes={'y': Scheme(shape=(5, 4), dtype=torch.float32), 'x': Scheme(shape=(3,), dtype=torch.float32)}\n",
            "      edata_schemes={'a': Scheme(shape=(4,), dtype=torch.float32)})\n",
            "Graph(num_nodes=3, num_edges=2,\n",
            "      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'x': Scheme(shape=(3,), dtype=torch.float32), 'y': Scheme(shape=(5, 4), dtype=torch.float32)}\n",
            "      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'a': Scheme(shape=(4,), dtype=torch.float32)})\n",
            "Graph(num_nodes=4, num_edges=3,\n",
            "      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'x': Scheme(shape=(3,), dtype=torch.float32), 'y': Scheme(shape=(5, 4), dtype=torch.float32)}\n",
            "      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'a': Scheme(shape=(4,), dtype=torch.float32)})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(dgl.load_graphs('graph.dgl'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fCYqPnR408_z",
        "outputId": "39cd745a-2eee-4e29-9fe0-923636def193"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "([Graph(num_nodes=6, num_edges=5,\n",
            "      ndata_schemes={'x': Scheme(shape=(3,), dtype=torch.float32), 'y': Scheme(shape=(5, 4), dtype=torch.float32)}\n",
            "      edata_schemes={'a': Scheme(shape=(4,), dtype=torch.float32)})], {})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "iXEO9Hpm1EF0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}